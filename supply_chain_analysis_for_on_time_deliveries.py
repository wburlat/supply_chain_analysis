# -*- coding: utf-8 -*-
"""Supply Chain Analysis for On-Time Deliveries

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iSXViF5D0OkOOgiHG-n3lofn32G9-zd3

Project Title: "Supply Chain Analysis for On-Time Deliveries" by Wendel Burlat
"""

from google.colab import files
uploades = files.upload()

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder

data = pd.read_csv('Train.csv')

missing_values = data.isnull().sum()
print("Missing Values:\n", missing_values)

def handle_outliers(df, column_name):
    # Calculate the IQR (Interquartile Range)
    Q1 = df[column_name].quantile(0.25)
    Q3 = df[column_name].quantile(0.75)
    IQR = Q3 - Q1

    # Define the lower and upper bounds to identify outliers
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR

    # Replace outliers with the upper or lower bound
    df[column_name] = np.where(df[column_name] < lower_bound, lower_bound, df[column_name])
    df[column_name] = np.where(df[column_name] > upper_bound, upper_bound, df[column_name])

# Handle outliers for 'Cost_of_the_Product' and 'Weight_in_gms'
handle_outliers(data, 'Cost_of_the_Product')
handle_outliers(data, 'Weight_in_gms')

# Encoding categorical variables
# Convert categorical variables into numerical labels using Label Encoding
label_encoder = LabelEncoder()
data['Warehouse_block'] = label_encoder.fit_transform(data['Warehouse_block'])
data['Mode_of_Shipment'] = label_encoder.fit_transform(data['Mode_of_Shipment'])
data['Product_importance'] = label_encoder.fit_transform(data['Product_importance'])
data['Gender'] = label_encoder.fit_transform(data['Gender'])

# Display the preprocessed dataset
print("\nPreprocessed Dataset:")
print(data.head())

import matplotlib.pyplot as plt
from scipy.stats import chi2_contingency
import seaborn as sns

# Investigate the impact of the number of customer care calls on on-time deliveries
sns.countplot(x='Customer_care_calls', hue='Reached.on.Time_Y.N', data=data)
plt.title('Impact of Customer Care Calls on On-Time Deliveries')
plt.xlabel('Customer Care Calls')
plt.ylabel('Count')
plt.show()

# Investigate the impact of the warehouse block on on-time deliveries
sns.countplot(x='Warehouse_block', hue='Reached.on.Time_Y.N', data=data)
plt.title('Impact of Warehouse Block on On-Time Deliveries')
plt.xlabel('Warehouse Block')
plt.ylabel('Count')
plt.show()

# Investigate the impact of the number of customer care calls on on-time deliveries
sns.countplot(x='Customer_care_calls', hue='Reached.on.Time_Y.N', data=data)
plt.title('Impact of Customer Care Calls on On-Time Deliveries')
plt.xlabel('Customer Care Calls')
plt.ylabel('Count')
plt.show()

"""We use count plots to visualize the impact of the mode of shipment, warehouse block, and the number of customer care calls on on-time deliveries.
We perform a chi-squared test to analyze the relationship between product importance and on-time deliveries. The chi-squared statistic and p-value are calculated.
We also perform a chi-squared test to analyze the impact of gender on on-time deliveries. The chi-squared statistic and p-value are calculated.
The count plots help visualize the distribution of on-time and late deliveries based on different factors, while the chi-squared tests assess the statistical significance of the relationships between categorical variables and on-time deliveries.
"""

# Analyze the relationship between product importance and on-time deliveries using a chi-squared test
contingency_table = pd.crosstab(data['Product_importance'], data['Reached.on.Time_Y.N'])
chi2, p, _, _ = chi2_contingency(contingency_table)
print(f'Chi-squared statistic: {chi2}')
print(f'p-value: {p}')

# Analyze the impact of gender on on-time deliveries using a chi-squared test
contingency_table_gender = pd.crosstab(data['Gender'], data['Reached.on.Time_Y.N'])
chi2_gender, p_gender, _, _ = chi2_contingency(contingency_table_gender)
print(f'Chi-squared statistic for Gender: {chi2_gender}')
print(f'p-value for Gender: {p_gender}')

from scipy.stats import ttest_ind
# Examine the relationship between discounts offered and on-time deliveries using a box plot
plt.figure(figsize=(8, 6))
sns.boxplot(x='Reached.on.Time_Y.N', y='Discount_offered', data=data)
plt.title('Relationship Between Discounts and On-Time Deliveries')
plt.xlabel('On-Time Deliveries (1 for Yes, 0 for No)')
plt.ylabel('Discount Offered')
plt.show()

# Perform a t-test to determine if there's a significant difference in discounts for on-time and late deliveries
on_time_discounts = data[data['Reached.on.Time_Y.N'] == 1]['Discount_offered']
late_deliveries_discounts = data[data['Reached.on.Time_Y.N'] == 0]['Discount_offered']

t_stat, p_value = ttest_ind(on_time_discounts, late_deliveries_discounts)
print(f'T-test statistic: {t_stat}')
print(f'p-value: {p_value}')

# Determine an optimal discount level for timely deliveries
optimal_discount = data[data['Reached.on.Time_Y.N'] == 1]['Discount_offered'].median()
print(f'Optimal Discount for Timely Deliveries: {optimal_discount}')

# Perform a t-test to determine if there's a significant difference in discounts for on-time and late deliveries
on_time_discounts = data[data['Reached.on.Time_Y.N'] == 1]['Discount_offered']
late_deliveries_discounts = data[data['Reached.on.Time_Y.N'] == 0]['Discount_offered']

t_stat, p_value = ttest_ind(on_time_discounts, late_deliveries_discounts)
print(f'T-test statistic: {t_stat}')
print(f'p-value: {p_value}')

# Determine an optimal discount level for timely deliveries
optimal_discount = data[data['Reached.on.Time_Y.N'] == 1]['Discount_offered'].median()
print(f'Optimal Discount for Timely Deliveries: {optimal_discount}')

"""Based on the T-test statistics and analysis, we can make the following findings:

T-Test Statistic: The calculated T-test statistic is approximately 45.37. This value represents the magnitude of the difference in discounts offered between on-time deliveries and late deliveries. A higher T-test statistic indicates a larger difference in means.

P-Value: The p-value obtained from the T-test is 0.0. A p-value of 0.0 indicates an extremely low probability of observing such a significant difference in discounts between on-time and late deliveries by random chance alone. Typically, a p-value less than 0.05 is considered statistically significant. In this case, the p-value is significantly lower, reaffirming the strong statistical significance of the difference in discounts.

Optimal Discount for Timely Deliveries: The analysis suggests that the optimal discount level for timely deliveries is approximately 9.0. This value represents the median discount offered for on-time deliveries in the dataset. It implies that, on average, offering a discount of around 9 units results in a higher likelihood of on-time deliveries.

Findings Interpretation:

The T-test results indicate that there is a statistically significant difference in the discounts offered for on-time deliveries compared to late deliveries. This suggests that the level of discount plays a role in determining the delivery punctuality. Offering a discount, especially around the optimal value of 9 units, can potentially improve the chances of on-time deliveries. However,
it's important to consider other factors and conduct further analysis or experimentation to validate this finding and optimize discount strategies for better supply chain performance.
"""



from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Split the dataset into features (X) and the target variable (y)
X = data.drop('Reached.on.Time_Y.N', axis=1)
y = data['Reached.on.Time_Y.N']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features (optional but recommended for logistic regression)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Create a logistic regression model
model = LogisticRegression()

# Fit the model on the training data
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
confusion = confusion_matrix(y_test, y_pred)
classification = classification_report(y_test, y_pred)

# Display evaluation metrics
print(f'Accuracy: {accuracy:.2f}')
print('Confusion Matrix:\n', confusion)
print('Classification Report:\n', classification)

import matplotlib.pyplot as plt
import numpy as np

# Assuming you already have the y_test and y_pred from the logistic regression model
# y_test contains the actual values (0 or 1)
# y_pred contains the predicted probabilities (0.0 to 1.0)

# Create an array of indices for sorting the data
sorted_indices = np.argsort(y_pred)

# Sort the actual and predicted values based on predicted probabilities
y_test_sorted = np.array(y_test)[sorted_indices]
y_pred_sorted = np.array(y_pred)[sorted_indices]

# Create a scatter plot
plt.figure(figsize=(10, 6))
plt.scatter(range(len(y_test_sorted)), y_pred_sorted, label='Predicted', alpha=0.5)
plt.scatter(range(len(y_test_sorted)), y_test_sorted, label='Actual', alpha=0.5)
plt.xlabel('Sample Index')
plt.ylabel('Probability (0 to 1)')
plt.title('Model vs. Actual Values for On-Time Deliveries')
plt.legend()
plt.show()



"""Accuracy: 0.65
Confusion Matrix:
 [[534 361]
 [403 902]]
Classification Report:
               precision    recall  f1-score   support

           0       0.57      0.60      0.58       895
           1       0.71      0.69      0.70      1305

    accuracy                           0.65      2200
   macro avg       0.64      0.64      0.64      2200
weighted avg       0.66      0.65      0.65      2200

ChatGPT
Based on the evaluation of the logistic regression model for forecasting on-time deliveries, here are the key findings:

Accuracy: The model achieved an accuracy of approximately 65%. This means that it correctly predicted the on-time or late deliveries for 65% of the test samples.

Confusion Matrix:

True Positives (TP): 902
True Negatives (TN): 534
False Positives (FP): 361
False Negatives (FN): 403
The confusion matrix provides a detailed breakdown of correct and incorrect predictions.

Classification Report:

Precision for class 0 (late deliveries): 0.57
Precision for class 1 (on-time deliveries): 0.71
Recall for class 0: 0.60
Recall for class 1: 0.69
F1-score for class 0: 0.58
F1-score for class 1: 0.70
The classification report provides additional metrics, including precision, recall, and F1-score, for both classes (0 and 1). These metrics provide a more comprehensive view of model performance.

Support: The support values indicate the number of samples in each class.

Macro Avg and Weighted Avg: These metrics provide an average across both classes. The macro average calculates the metric independently for each class and then takes the average. The weighted average considers the class distribution and weights the average accordingly.

Overall, the model shows some predictive capability, but there is room for improvement in terms of accuracy and other performance metrics. You may consider further refining the model by:

Exploring additional features that might have a stronger impact on on-time deliveries.
Trying different machine learning algorithms, such as decision trees, random forests, or gradient boosting.
Tuning hyperparameters to optimize model performance.
Collecting more data to improve the model's ability to generalize.
It's important to note that the choice of features and the quality of the dataset play a significant role in model performance.
"""



"""Based on the analysis of the dataset and the predictive model, here is a summary of findings and actionable recommendations to improve supply chain efficiency:

Summary of Findings:

Discounts Impact on On-Time Deliveries:

Discounts offered have a statistically significant impact on on-time deliveries.
Lower discounts are associated with a higher likelihood of on-time deliveries.
Factors Affecting On-Time Deliveries:

The mode of shipment, warehouse block, and the number of customer care calls appear to influence on-time deliveries.
Certain combinations of these factors may result in more reliable deliveries.
Product Importance and Gender:

Product importance and gender do not show a strong direct correlation with on-time deliveries, but they may indirectly affect delivery efficiency through other factors.
Logistic Regression Model:

The logistic regression model achieved an accuracy of 65% in predicting on-time deliveries based on selected factors.
Recommendations for Improving Supply Chain Efficiency:

Discount Strategy Optimization:

Analyze historical data to identify the optimal discount levels for different product categories and customer segments.
Implement dynamic discounting strategies that consider product importance and customer characteristics.
Continuously monitor the impact of discounts on delivery performance and adjust as needed.
Mode of Shipment and Warehouse Management:

Evaluate the efficiency of different modes of shipment and warehouse blocks.
Consider prioritizing certain modes or warehouses for time-sensitive deliveries.
Optimize inventory placement strategies to minimize delivery delays.
Customer Care and Communication:

Enhance customer care services and response times to reduce the number of customer care calls.
Implement proactive communication strategies to keep customers informed about shipment status and expected delivery times.
Data Collection and Analysis:

Collect more granular data on delivery processes, including transit times, route optimization, and delivery personnel performance.
Implement advanced analytics and machine learning models to better predict and manage delivery times.
Continuous Monitoring and Feedback:

Establish key performance indicators (KPIs) to measure and track delivery efficiency regularly.
Solicit feedback from customers regarding their delivery experiences and use this feedback to drive improvements.
Technology and Automation:

Invest in supply chain management software and technologies that enable real-time tracking and monitoring of shipments.
Explore automation opportunities in order processing, inventory management, and delivery routing.
Employee Training and Development:

Provide training programs for employees involved in the supply chain to enhance their skills and knowledge.
Foster a culture of continuous improvement and innovation.
Risk Mitigation:

Develop contingency plans for handling unexpected disruptions in the supply chain, such as natural disasters or global crises.
Diversify suppliers and transportation options to reduce dependence on single sources.
Benchmarking and Industry Best Practices:

Benchmark supply chain performance against industry best practices and competitors.
Learn from successful companies in your industry and adapt their strategies to your supply chain.
Customer-Centric Approach:

Prioritize customer satisfaction and on-time deliveries as a core business objective.
Continuously seek ways to exceed customer expectations in terms of delivery reliability.
These recommendations are intended to guide improvements in supply chain efficiency and enhance the reliability of on-time deliveries. Implementing a combination of these strategies can lead to better customer satisfaction, reduced operational costs, and a competitive edge in the market. It's important to regularly assess and adapt these recommendations based on evolving market dynamics and customer needs.
"""